diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 4e1a970..f8f2519 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -3566,10 +3566,10 @@ public final class Settings {
         /* START Constants for Evervolv Toolbox */
 
         /**
-         * Disable all toolbox options. Allows user to achieve a more "stock"
-         * look and feel of android.
-         * @hide
-         */
+        * Disable all toolbox options. Allows user to achieve a more "stock"
+        * look and feel of android.
+        * @hide
+        */
         public static final String DISABLE_TOOLBOX = "disable_toolbox";
 
         /**
@@ -3581,23 +3581,6 @@ public final class Settings {
          */
         public static final String STATUSBAR_CLOCK_AM_PM_STYLE = "statusbar_clock_am_pm_style";
 
-        /**
-         * Show or hide power menu options
-         * 1 = hide reboot menu
-         * 2 = hide screenshot option
-         * 4 = hide sound toggle
-         * 8 = hide airplane mode toggle
-         * @hide
-         */
-        public static final String HIDDEN_POWER_MENU_OPTIONS = "hidden_power_menu_options";
-
-        /**
-         * Change the screenshot delay from the power menu
-         * Default: 1 (1 second, 1000ms)
-         * @hide
-         */
-        public static final String POWER_MENU_SCREENSHOT_DELAY = "power_menu_screenshot_delay";
-
         /* END Constants for Evervolv Toolbox */
         /**
          * Settings to backup. This is here so that it's in the same place as the settings
@@ -3655,9 +3638,7 @@ public final class Settings {
             NOTIFICATION_SOUND,
             ACCELEROMETER_ROTATION,
             DISABLE_TOOLBOX,
-            STATUSBAR_CLOCK_AM_PM_STYLE,
-            HIDDEN_POWER_MENU_OPTIONS,
-            POWER_MENU_SCREENSHOT_DELAY
+            STATUSBAR_CLOCK_AM_PM_STYLE
         };
 
         /**
diff --git a/core/java/android/view/WindowManagerPolicy.java b/core/java/android/view/WindowManagerPolicy.java
index 8e90736..e6f5b83 100644
--- a/core/java/android/view/WindowManagerPolicy.java
+++ b/core/java/android/view/WindowManagerPolicy.java
@@ -477,7 +477,6 @@ public interface WindowManagerPolicy {
 
         public void shutdown(boolean confirm);
         public void rebootSafeMode(boolean confirm);
-        public void reboot(String reason);
 
         /**
          * Return the window manager lock needed to correctly call "Lw" methods.
diff --git a/core/res/res/drawable-hdpi/ic_lock_reboot_alpha.png b/core/res/res/drawable-hdpi/ic_lock_reboot_alpha.png
deleted file mode 100644
index ca00936..0000000
Binary files a/core/res/res/drawable-hdpi/ic_lock_reboot_alpha.png and /dev/null differ
diff --git a/core/res/res/drawable-hdpi/ic_lock_screenshot_alpha.png b/core/res/res/drawable-hdpi/ic_lock_screenshot_alpha.png
deleted file mode 100644
index 2bccf78..0000000
Binary files a/core/res/res/drawable-hdpi/ic_lock_screenshot_alpha.png and /dev/null differ
diff --git a/core/res/res/drawable-ldpi/ic_lock_reboot_alpha.png b/core/res/res/drawable-ldpi/ic_lock_reboot_alpha.png
deleted file mode 100644
index b96d099..0000000
Binary files a/core/res/res/drawable-ldpi/ic_lock_reboot_alpha.png and /dev/null differ
diff --git a/core/res/res/drawable-ldpi/ic_lock_screenshot_alpha.png b/core/res/res/drawable-ldpi/ic_lock_screenshot_alpha.png
deleted file mode 100644
index 60e91ef..0000000
Binary files a/core/res/res/drawable-ldpi/ic_lock_screenshot_alpha.png and /dev/null differ
diff --git a/core/res/res/drawable-mdpi/ic_lock_reboot_alpha.png b/core/res/res/drawable-mdpi/ic_lock_reboot_alpha.png
deleted file mode 100644
index 2b125b9..0000000
Binary files a/core/res/res/drawable-mdpi/ic_lock_reboot_alpha.png and /dev/null differ
diff --git a/core/res/res/drawable-mdpi/ic_lock_screenshot_alpha.png b/core/res/res/drawable-mdpi/ic_lock_screenshot_alpha.png
deleted file mode 100644
index bea04d1..0000000
Binary files a/core/res/res/drawable-mdpi/ic_lock_screenshot_alpha.png and /dev/null differ
diff --git a/core/res/res/drawable-xhdpi/ic_lock_reboot_alpha.png b/core/res/res/drawable-xhdpi/ic_lock_reboot_alpha.png
deleted file mode 100644
index 781a600..0000000
Binary files a/core/res/res/drawable-xhdpi/ic_lock_reboot_alpha.png and /dev/null differ
diff --git a/core/res/res/drawable-xhdpi/ic_lock_screenshot_alpha.png b/core/res/res/drawable-xhdpi/ic_lock_screenshot_alpha.png
deleted file mode 100644
index a478269..0000000
Binary files a/core/res/res/drawable-xhdpi/ic_lock_screenshot_alpha.png and /dev/null differ
diff --git a/core/res/res/drawable/ic_lock_reboot.xml b/core/res/res/drawable/ic_lock_reboot.xml
deleted file mode 100644
index cf49ecf..0000000
--- a/core/res/res/drawable/ic_lock_reboot.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2014 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<bitmap xmlns:android="http://schemas.android.com/apk/res/android"
-    android:src="@drawable/ic_lock_reboot_alpha"
-    android:tint="?attr/colorControlNormal" />
diff --git a/core/res/res/drawable/ic_lock_screenshot.xml b/core/res/res/drawable/ic_lock_screenshot.xml
deleted file mode 100644
index a421e68..0000000
--- a/core/res/res/drawable/ic_lock_screenshot.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2014 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<bitmap xmlns:android="http://schemas.android.com/apk/res/android"
-    android:src="@drawable/ic_lock_screenshot_alpha"
-    android:tint="?attr/colorControlNormal" />
diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 0f4d42e..ba428fe 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -2069,8 +2069,6 @@
          on the current state of the device.
          Each item must be one of the following strings:
          "power" = Power off
-         "reboot" = Reboot
-         "screenshot" = Take screenshot
          "settings" = An action to launch settings
          "airplane" = Airplane mode toggle
          "bugreport" = Take bug report, if available
@@ -2079,11 +2077,7 @@
          -->
     <string-array translatable="false" name="config_globalActionsList">
         <item>power</item>
-        <item>reboot</item>
-        <item>screenshot</item>
-        <item>airplane</item>
         <item>bugreport</item>
-        <item>silent</item>
         <item>users</item>
     </string-array>
 
diff --git a/core/res/res/values/ev_arrays.xml b/core/res/res/values/ev_arrays.xml
deleted file mode 100644
index a4e0e3c..0000000
--- a/core/res/res/values/ev_arrays.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-/*
-** Copyright 20014, Evervolv
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
--->
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-
-    <!-- Defines the shutdown options shown in the reboot dialog. -->
-    <array name="shutdown_reboot_options" translatable="false">
-        <item>@string/reboot_reboot</item>
-        <item>@string/reboot_recovery</item>
-        <item>@string/reboot_bootloader</item>
-    </array>
-
-    <!-- Do not translate. Defines the shutdown actions passed to the kernel.
-         The first item should be empty for regular reboot. -->
-    <string-array name="shutdown_reboot_actions" translatable="false">
-        <item></item>
-        <item>recovery</item>
-        <item>bootloader</item>
-    </string-array>
-
-</resources>
diff --git a/core/res/res/values/ev_strings.xml b/core/res/res/values/ev_strings.xml
deleted file mode 100644
index 1dfbd22..0000000
--- a/core/res/res/values/ev_strings.xml
+++ /dev/null
@@ -1,56 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-/*
-** Copyright 20014, Evervolv
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
--->
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-
-    <!-- Button to reboot the tablet, within the Tablet Options dialog -->
-    <string name="reboot_system" product="tablet">Reboot tablet</string>
-
-    <!-- Button to reboot the phone, within the Phone Options dialog -->
-    <string name="reboot_system" product="default">Reboot phone</string>
-
-    <!-- label for item that screenshots in phone options dialog -->
-    <string name="global_action_screenshot">Screenshot</string>
-
-    <!-- Button to reboot the phone, within the Reboot Options dialog -->
-    <string name="reboot_reboot">Reboot</string>
-    <!-- Button to reboot the phone into recovery, within the Reboot Options dialog -->
-    <string name="reboot_recovery">Recovery</string>
-    <!-- Button to reboot the phone into bootloader, within the Reboot Options dialog -->
-    <string name="reboot_bootloader">Bootloader</string>
-    <!-- Button to hot reboot the device, within the Reboot Options dialog -->
-    <string name="reboot_hot">Hot Reboot</string>
-    <!-- Button to reboot the phone into bootmenu, within the Reboot Options dialog -->
-    <string name="reboot_bootmenu">Bootmenu</string>
-    <!-- Button to reboot the phone into fastboot, within the Reboot Options dialog -->
-    <string name="reboot_fastboot">Fastboot</string>
-    <!-- Button to reboot the phone into download, within the Reboot Options dialog -->
-    <string name="reboot_download">Download</string>
-
-    <!-- Reboot Progress Dialog. This is shown if the user chooses to reboot the phone. -->
-    <string name="reboot_progress">Rebooting\u2026</string>
-
-    <!-- Hot Reboot Progress Dialog title. Shown if the user chooses to hot reboot the tablet. -->
-    <string name="hot_reboot_title" product="tablet">Hot reboot tablet</string>
-    <!-- Hot Reboot Progress Dialog title. Shown if the user chooses to hot reboot the phone. -->
-    <string name="hot_reboot_title" product="default">Hot reboot phone</string>
-
-    <!-- Hot Reboot Progress Dialog message. Shown if the user chooses to hot reboot the device. -->
-    <string name="hot_reboot_progress">Restarting android framework\u2026</string>
-
-</resources>
diff --git a/core/res/res/values/ev_symbols.xml b/core/res/res/values/ev_symbols.xml
deleted file mode 100644
index a347676..0000000
--- a/core/res/res/values/ev_symbols.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-/* Copyright 2012, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
--->
-<resources>
-  <!-- From Evervolv -->
-  <java-symbol type="array" name="shutdown_reboot_actions" />
-  <java-symbol type="array" name="shutdown_reboot_options" />
-  <java-symbol type="drawable" name="ic_lock_reboot" />
-  <java-symbol type="drawable" name="ic_lock_screenshot" />
-  <java-symbol type="string" name="global_action_reboot" />
-  <java-symbol type="string" name="global_action_screenshot" />
-  <java-symbol type="string" name="hot_reboot_progress" />
-  <java-symbol type="string" name="hot_reboot_title" />
-  <java-symbol type="string" name="reboot_hot" />
-  <java-symbol type="string" name="reboot_progress" />
-  <java-symbol type="string" name="reboot_system" />
-</resources>
diff --git a/services/core/java/com/android/server/policy/GlobalActions.java b/services/core/java/com/android/server/policy/GlobalActions.java
index e443fcb..457d3d5 100644
--- a/services/core/java/com/android/server/policy/GlobalActions.java
+++ b/services/core/java/com/android/server/policy/GlobalActions.java
@@ -83,15 +83,6 @@ import java.util.ArrayList;
 import java.util.List;
 
 /**
- * Needed for takeScreenshot
- */
-import android.content.ServiceConnection;
-import android.content.ComponentName;
-import android.os.IBinder;
-import android.os.Messenger;
-import android.os.RemoteException;
-
-/**
  * Helper to show the global actions dialog.  Each item is an {@link Action} that
  * may show depending on whether the keyguard is showing, and whether the device
  * is provisioned.
@@ -106,7 +97,6 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
      * see config.xml config_globalActionList */
     private static final String GLOBAL_ACTION_KEY_POWER = "power";
     private static final String GLOBAL_ACTION_KEY_REBOOT = "reboot";
-    private static final String GLOBAL_ACTION_KEY_SCREENSHOT = "screenshot";
     private static final String GLOBAL_ACTION_KEY_AIRPLANE = "airplane";
     private static final String GLOBAL_ACTION_KEY_BUGREPORT = "bugreport";
     private static final String GLOBAL_ACTION_KEY_SILENT = "silent";
@@ -137,15 +127,6 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
     private boolean mHasVibrator;
     private final boolean mShowSilentToggle;
 
-    private boolean mDisableToolbox;
-    private int mHiddenMenuOptions;
-    private int mScreenshotDelay;
-
-    private static final int HIDE_REBOOT = 1;
-    private static final int HIDE_SCREENSHOT = 2;
-    private static final int HIDE_SOUND = 4;
-    private static final int HIDE_AIRPLANE = 8;
-
     /**
      * @param context everything needs a context :(
      */
@@ -179,7 +160,6 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
 
         mShowSilentToggle = SHOW_SILENT_TOGGLE && !mContext.getResources().getBoolean(
                 com.android.internal.R.bool.config_useFixedVolume);
-        checkSettings();
     }
 
     /**
@@ -213,7 +193,6 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
 
     private void handleShow() {
         awakenIfNecessary();
-        checkSettings();
         mDialog = createDialog();
         prepareDialog();
 
@@ -299,24 +278,16 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
             if (GLOBAL_ACTION_KEY_POWER.equals(actionKey)) {
                 mItems.add(new PowerAction());
             } else if (GLOBAL_ACTION_KEY_REBOOT.equals(actionKey)) {
-                if (!mDisableToolbox && (mHiddenMenuOptions & HIDE_REBOOT) != HIDE_REBOOT) {
-                    mItems.add(new RebootAction());
-                }
-            } else if (GLOBAL_ACTION_KEY_SCREENSHOT.equals(actionKey)) {
-                if (!mDisableToolbox && (mHiddenMenuOptions & HIDE_SCREENSHOT) != HIDE_SCREENSHOT) {
-                    mItems.add(ScreenshotAction());
-                }
+                mItems.add(new RebootAction());
             } else if (GLOBAL_ACTION_KEY_AIRPLANE.equals(actionKey)) {
-                if ((mHiddenMenuOptions & HIDE_AIRPLANE) != HIDE_AIRPLANE) { 
-                    mItems.add(mAirplaneModeOn);
-                }
+                mItems.add(mAirplaneModeOn);
             } else if (GLOBAL_ACTION_KEY_BUGREPORT.equals(actionKey)) {
                 if (Settings.Global.getInt(mContext.getContentResolver(),
                         Settings.Global.BUGREPORT_IN_POWER_MENU, 0) != 0 && isCurrentUserOwner()) {
                     mItems.add(new BugReportAction());
                 }
             } else if (GLOBAL_ACTION_KEY_SILENT.equals(actionKey)) {
-                if (mShowSilentToggle && (mHiddenMenuOptions & HIDE_SOUND) != HIDE_SOUND) {
+                if (mShowSilentToggle) {
                     mItems.add(mSilentModeAction);
                 }
             } else if (GLOBAL_ACTION_KEY_USERS.equals(actionKey)) {
@@ -379,9 +350,7 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
         public boolean onLongPress() {
             UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
             if (!um.hasUserRestriction(UserManager.DISALLOW_SAFE_BOOT)) {
-                if (mDisableToolbox || (mHiddenMenuOptions & HIDE_REBOOT) == HIDE_REBOOT) {
-                   mWindowManagerFuncs.rebootSafeMode(true);
-                }
+                mWindowManagerFuncs.rebootSafeMode(true);
                 return true;
             }
             return false;
@@ -403,19 +372,14 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
             mWindowManagerFuncs.shutdown(false /* confirm */);
         }
     }
-    private final class RebootAction extends SinglePressAction implements LongPressAction {
+    
+    private final class RebootAction extends SinglePressAction {
         private RebootAction() {
-            super(com.android.internal.R.drawable.ic_lock_reboot,
+            super(com.android.internal.R.drawable.ic_lock_power_reboot,
                     R.string.global_action_reboot);
         }
 
         @Override
-        public boolean onLongPress() {
-            mWindowManagerFuncs.rebootSafeMode(true);
-            return true;
-        }
-
-        @Override
         public boolean showDuringKeyguard() {
             return true;
         }
@@ -438,24 +402,6 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
         }
     }
 
-    private Action ScreenshotAction() {
-        return new SinglePressAction(com.android.internal.R.drawable.ic_lock_screenshot,
-                R.string.global_action_screenshot) {
-
-            public void onPress() {
-                takeScreenshot();
-            }
-
-            public boolean showDuringKeyguard() {
-                return true;
-            }
-
-            public boolean showBeforeProvisioning() {
-                return false;
-            }
-        };
-    }
-
     private class BugReportAction extends SinglePressAction implements LongPressAction {
 
         public BugReportAction() {
@@ -664,94 +610,13 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
             }
         }
     }
-    /**
-     * functions needed for taking screenhots.
-     * This leverages the built in ICS screenshot functionality
-     */
-    final Object mScreenshotLock = new Object();
-    ServiceConnection mScreenshotConnection = null;
-
-    final Runnable mScreenshotTimeout = new Runnable() {
-        @Override public void run() {
-            synchronized (mScreenshotLock) {
-                if (mScreenshotConnection != null) {
-                    mContext.unbindService(mScreenshotConnection);
-                    mScreenshotConnection = null;
-                }
-            }
-        }
-    };
-
-    private void takeScreenshot() {
-        synchronized (mScreenshotLock) {
-            if (mScreenshotConnection != null) {
-                return;
-            }
-            ComponentName cn = new ComponentName("com.android.systemui",
-                    "com.android.systemui.screenshot.TakeScreenshotService");
-            Intent intent = new Intent();
-            intent.setComponent(cn);
-            ServiceConnection conn = new ServiceConnection() {
-                @Override
-                public void onServiceConnected(ComponentName name, IBinder service) {
-                    synchronized (mScreenshotLock) {
-                        if (mScreenshotConnection != this) {
-                            return;
-                        }
-                        Messenger messenger = new Messenger(service);
-                        Message msg = Message.obtain(null, 1);
-                        final ServiceConnection myConn = this;
-                        Handler h = new Handler(mHandler.getLooper()) {
-                            @Override
-                            public void handleMessage(Message msg) {
-                                synchronized (mScreenshotLock) {
-                                    if (mScreenshotConnection == myConn) {
-                                        mContext.unbindService(mScreenshotConnection);
-                                        mScreenshotConnection = null;
-                                        mHandler.removeCallbacks(mScreenshotTimeout);
-                                    }
-                                }
-                            }
-                        };
-                        msg.replyTo = new Messenger(h);
-                        msg.arg1 = msg.arg2 = 0;
-
-                        /*  remove for the time being
-                        if (mStatusBar != null && mStatusBar.isVisibleLw())
-                            msg.arg1 = 1;
-                        if (mNavigationBar != null && mNavigationBar.isVisibleLw())
-                            msg.arg2 = 1;
-                         */
-
-                        /* User definable delay, mScreenshotDelay = 1 by default */
-                        try {
-                            Thread.sleep(mScreenshotDelay * 1000);
-                        } catch (InterruptedException ie) {
-                        }
-
-                        /* take the screenshot */
-                        try {
-                            messenger.send(msg);
-                        } catch (RemoteException e) {
-                        }
-                    }
-                }
-                @Override
-                public void onServiceDisconnected(ComponentName name) {}
-            };
-            if (mContext.bindService(intent, conn, Context.BIND_AUTO_CREATE)) {
-                mScreenshotConnection = conn;
-                mHandler.postDelayed(mScreenshotTimeout, 10000);
-            }
-        }
-    }
 
     private void prepareDialog() {
         refreshSilentMode();
         mAirplaneModeOn.updateState(mAirplaneState);
         mAdapter.notifyDataSetChanged();
         mDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);
-        if (mShowSilentToggle && (mHiddenMenuOptions & HIDE_SOUND) != HIDE_SOUND) {
+        if (mShowSilentToggle) {
             IntentFilter filter = new IntentFilter(AudioManager.RINGER_MODE_CHANGED_ACTION);
             mContext.registerReceiver(mRingerModeReceiver, filter);
         }
@@ -768,7 +633,7 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
 
     /** {@inheritDoc} */
     public void onDismiss(DialogInterface dialog) {
-        if (mShowSilentToggle && (mHiddenMenuOptions & HIDE_SOUND) != HIDE_SOUND) {
+        if (mShowSilentToggle) {
             try {
                 mContext.unregisterReceiver(mRingerModeReceiver);
             } catch (IllegalArgumentException ie) {
@@ -1299,15 +1164,6 @@ class GlobalActions implements DialogInterface.OnDismissListener, DialogInterfac
         }
     }
 
-    private void checkSettings() {
-        mDisableToolbox = Settings.System.getInt(mContext.getContentResolver(),
-                Settings.System.DISABLE_TOOLBOX, 0) == 1;
-        mHiddenMenuOptions = Settings.System.getInt(mContext.getContentResolver(),
-                Settings.System.HIDDEN_POWER_MENU_OPTIONS, 0);
-        mScreenshotDelay = Settings.System.getInt(mContext.getContentResolver(),
-                Settings.System.POWER_MENU_SCREENSHOT_DELAY, 1);
-    }
-
     private static final class GlobalActionsDialog extends Dialog implements DialogInterface {
         private final Context mContext;
         private final int mWindowTouchSlop;
diff --git a/services/core/java/com/android/server/power/ShutdownThread.java b/services/core/java/com/android/server/power/ShutdownThread.java
index d8668f0..00c7ce9 100644
--- a/services/core/java/com/android/server/power/ShutdownThread.java
+++ b/services/core/java/com/android/server/power/ShutdownThread.java
@@ -34,8 +34,6 @@ import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.os.FileUtils;
-import android.os.IBinder;
-import android.os.IPowerManager;
 import android.os.Handler;
 import android.os.PowerManager;
 import android.os.RecoverySystem;
@@ -56,7 +54,6 @@ import com.android.internal.telephony.ITelephony;
 import com.android.server.pm.PackageManagerService;
 
 import android.util.Log;
-import android.view.KeyEvent;
 import android.view.WindowManager;
 
 import java.io.BufferedReader;
@@ -91,7 +88,6 @@ public final class ShutdownThread extends Thread {
     private static boolean mRebootSafeMode;
     private static boolean mRebootHasProgressBar;
     private static String mReason;
-    private static boolean mRebootHot = false;
 
     // Provides shutdown assurance in case the system_server is killed
     public static final String SHUTDOWN_ACTION_PROPERTY = "sys.shutdown.requested";
@@ -178,64 +174,20 @@ public final class ShutdownThread extends Thread {
             if (sConfirmDialog != null) {
                 sConfirmDialog.dismiss();
             }
-
-            // Set different dialog message based on whether or not we're rebooting
-            if (mReboot && !mRebootSafeMode) {
-                sConfirmDialog = new AlertDialog.Builder(context)
-                        .setTitle(com.android.internal.R.string.reboot_system)
-                        .setSingleChoiceItems(com.android.internal.R.array.shutdown_reboot_options, 0, new DialogInterface.OnClickListener() {
-                            public void onClick(DialogInterface dialog, int which) {
-                                if (which < 0)
-                                    return;
-
-                                String actions[] = context.getResources().getStringArray(com.android.internal.R.array.shutdown_reboot_actions);
-
-                                if (actions != null && which < actions.length)
-                                    mReason = actions[which];
-                            }
-                        })
-                        .setPositiveButton(com.android.internal.R.string.yes, new DialogInterface.OnClickListener() {
-                            public void onClick(DialogInterface dialog, int which) {
-                                mReboot = true;
-                                if (mReason != null && mReason.equals("hot")) {
-                                    mRebootHot = true;
-                                }
-                                beginShutdownSequence(context);
-                            }
-                        })
-                        .setNegativeButton(com.android.internal.R.string.no, new DialogInterface.OnClickListener() {
-                            public void onClick(DialogInterface dialog, int which) {
-                                mReboot = false;
-                                dialog.cancel();
-                            }
-                        })
-                        .create();
-                        sConfirmDialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
-                            public boolean onKey (DialogInterface dialog, int keyCode, KeyEvent event) {
-                                if (keyCode == KeyEvent.KEYCODE_BACK) {
-                                    mReboot = false;
-                                    dialog.cancel();
-                                }
-                                return true;
-                            }
-                        });
-                // Initialize to the first reason
-                String actions[] = context.getResources().getStringArray(com.android.internal.R.array.shutdown_reboot_actions);
-                mReason = actions[0];
-            } else {
-                sConfirmDialog = new AlertDialog.Builder(context)
-                        .setTitle(mRebootSafeMode
-                                ? com.android.internal.R.string.reboot_safemode_title
-                                : com.android.internal.R.string.power_off)
-                        .setMessage(resourceId)
-                        .setPositiveButton(com.android.internal.R.string.yes, new DialogInterface.OnClickListener() {
-                            public void onClick(DialogInterface dialog, int which) {
-                                beginShutdownSequence(context);
-                            }
-                        })
-                        .setNegativeButton(com.android.internal.R.string.no, null)
-                        .create();
-            }
+            sConfirmDialog = new AlertDialog.Builder(context)
+                    .setTitle(mRebootSafeMode
+                            ? com.android.internal.R.string.reboot_safemode_title
+                            : showRebootOption
+                                    ? com.android.internal.R.string.reboot_title
+                                    : com.android.internal.R.string.power_off)
+                    .setMessage(resourceId)
+                    .setPositiveButton(com.android.internal.R.string.yes, new DialogInterface.OnClickListener() {
+                        public void onClick(DialogInterface dialog, int which) {
+                            beginShutdownSequence(context);
+                        }
+                    })
+                    .setNegativeButton(com.android.internal.R.string.no, null)
+                    .create();
             closer.dialog = sConfirmDialog;
             sConfirmDialog.setOnDismissListener(closer);
             sConfirmDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);
@@ -362,18 +314,8 @@ public final class ShutdownThread extends Thread {
                         com.android.internal.R.string.reboot_to_reset_message));
             pd.setIndeterminate(true);
         } else {
-            if (mReboot) {
-                if (mRebootHot) {
-                    pd.setTitle(context.getText(com.android.internal.R.string.hot_reboot_title));
-                    pd.setMessage(context.getText(com.android.internal.R.string.hot_reboot_progress));
-                } else {
-                    pd.setTitle(context.getText(com.android.internal.R.string.reboot_system));
-                    pd.setMessage(context.getText(com.android.internal.R.string.reboot_progress));
-                }
-            } else {
-                pd.setTitle(context.getText(com.android.internal.R.string.power_off));
-                pd.setMessage(context.getText(com.android.internal.R.string.shutdown_progress));
-            }
+            pd.setTitle(context.getText(com.android.internal.R.string.power_off));
+            pd.setMessage(context.getText(com.android.internal.R.string.shutdown_progress));
             pd.setIndeterminate(true);
         }
         pd.setCancelable(false);
@@ -436,50 +378,48 @@ public final class ShutdownThread extends Thread {
             }
         };
 
-        if (!mRebootHot) {
-            /*
-             * Write a system property in case the system_server reboots before we
-             * get to the actual hardware restart. If that happens, we'll retry at
-             * the beginning of the SystemServer startup.
-             */
-            {
-                String reason = (mReboot ? "1" : "0") + (mReason != null ? mReason : "");
-                SystemProperties.set(SHUTDOWN_ACTION_PROPERTY, reason);
-            }
+        /*
+         * Write a system property in case the system_server reboots before we
+         * get to the actual hardware restart. If that happens, we'll retry at
+         * the beginning of the SystemServer startup.
+         */
+        {
+            String reason = (mReboot ? "1" : "0") + (mReason != null ? mReason : "");
+            SystemProperties.set(SHUTDOWN_ACTION_PROPERTY, reason);
+        }
 
-            /*
-             * If we are rebooting into safe mode, write a system property
-             * indicating so.
-             */
-            if (mRebootSafeMode) {
-                SystemProperties.set(REBOOT_SAFEMODE_PROPERTY, "1");
-            }
+        /*
+         * If we are rebooting into safe mode, write a system property
+         * indicating so.
+         */
+        if (mRebootSafeMode) {
+            SystemProperties.set(REBOOT_SAFEMODE_PROPERTY, "1");
+        }
 
-            Log.i(TAG, "Sending shutdown broadcast...");
-
-            // First send the high-level shut down broadcast.
-            mActionDone = false;
-            Intent intent = new Intent(Intent.ACTION_SHUTDOWN);
-            intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
-            mContext.sendOrderedBroadcastAsUser(intent,
-                    UserHandle.ALL, null, br, mHandler, 0, null, null);
-
-            final long endTime = SystemClock.elapsedRealtime() + MAX_BROADCAST_TIME;
-            synchronized (mActionDoneSync) {
-                while (!mActionDone) {
-                    long delay = endTime - SystemClock.elapsedRealtime();
-                    if (delay <= 0) {
-                        Log.w(TAG, "Shutdown broadcast timed out");
-                        break;
-                    } else if (mRebootHasProgressBar) {
-                        int status = (int)((MAX_BROADCAST_TIME - delay) * 1.0 *
-                                BROADCAST_STOP_PERCENT / MAX_BROADCAST_TIME);
-                        sInstance.setRebootProgress(status, null);
-                    }
-                    try {
-                        mActionDoneSync.wait(Math.min(delay, PHONE_STATE_POLL_SLEEP_MSEC));
-                    } catch (InterruptedException e) {
-                    }
+        Log.i(TAG, "Sending shutdown broadcast...");
+
+        // First send the high-level shut down broadcast.
+        mActionDone = false;
+        Intent intent = new Intent(Intent.ACTION_SHUTDOWN);
+        intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
+        mContext.sendOrderedBroadcastAsUser(intent,
+                UserHandle.ALL, null, br, mHandler, 0, null, null);
+
+        final long endTime = SystemClock.elapsedRealtime() + MAX_BROADCAST_TIME;
+        synchronized (mActionDoneSync) {
+            while (!mActionDone) {
+                long delay = endTime - SystemClock.elapsedRealtime();
+                if (delay <= 0) {
+                    Log.w(TAG, "Shutdown broadcast timed out");
+                    break;
+                } else if (mRebootHasProgressBar) {
+                    int status = (int)((MAX_BROADCAST_TIME - delay) * 1.0 *
+                            BROADCAST_STOP_PERCENT / MAX_BROADCAST_TIME);
+                    sInstance.setRebootProgress(status, null);
+                }
+                try {
+                    mActionDoneSync.wait(Math.min(delay, PHONE_STATE_POLL_SLEEP_MSEC));
+                } catch (InterruptedException e) {
                 }
             }
         }
@@ -730,19 +670,6 @@ public final class ShutdownThread extends Thread {
     public static void rebootOrShutdown(final Context context, boolean reboot, String reason) {
         if (reboot) {
             Log.i(TAG, "Rebooting, reason: " + reason);
-            // check if hot reboot requested
-            if (mRebootHot) {
-                // crash system server to restart Android framework
-                try {
-                    IBinder b = ServiceManager.getService(Context.POWER_SERVICE);
-                    IPowerManager pm = IPowerManager.Stub.asInterface(b);
-                    pm.crash("Crashed by Hot Reboot");
-                } catch (RemoteException e) {
-                    Log.e(TAG, "Hot reboot failed, will attempt normal reboot instead", e);
-                    reason = null;
-                }
-            }
-            // normal reboot
             PowerManagerService.lowLevelReboot(reason);
             Log.e(TAG, "Reboot failed, will attempt shutdown instead");
             reason = null;
diff --git a/services/core/java/com/android/server/wm/WindowManagerService.java b/services/core/java/com/android/server/wm/WindowManagerService.java
index 7101f2e..9e0279d 100644
--- a/services/core/java/com/android/server/wm/WindowManagerService.java
+++ b/services/core/java/com/android/server/wm/WindowManagerService.java
@@ -5687,12 +5687,6 @@ public class WindowManagerService extends IWindowManager.Stub
         ShutdownThread.rebootSafeMode(mContext, confirm);
     }
 
-    // Called by window manager policy.  Not exposed externally.
-    @Override
-    public void reboot(String reason) {
-        ShutdownThread.reboot(mContext, reason, true);
-    }
-
     public void setCurrentProfileIds(final int[] currentProfileIds) {
         synchronized (mWindowMap) {
             mCurrentProfileIds = currentProfileIds;
